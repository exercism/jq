# borrowed from https://github.com/fadado/JBOL/blob/master/fadado.github.io/array/tuple.jq
# module {
#     name: "array/tuple",
#     description: "Permutations on tuples",
#     namespace: "fadado.github.io",
#     author: {
#         name: "Joan Josep Ordinas Rosa",
#         email: "jordinas@gmail.com"
#     },
# };
#
# Permutations
# P(n) = n!
#
# example: 
#   [1,2,3] | permutations
# outputs
#   [1,2,3]
#   [1,3,2]
#   [2,1,3]
#   [2,3,1]
#   [3,1,2]
#   [3,2,1]

def permutations: #:: TUPLE => *TUPLE
    def choose: range(0;length);
    #
    if length == 0
    then []
    else
        # pick one and add to what's left permuted
        choose as $i
        | .[$i:$i+1] + (del(.[$i])|permutations)
    end
;
#########################################################

def first: 1;
def middle: 3;

def permute5: [range(first;first + 5)] | permutations;

def rightOf($house): $house - . == 1;
#def nextTo($house): ($house - . == 1) or (. - $house == 1);
def nextTo($house): (. | rightOf($house)) or (-. | rightOf(-$house));

############################################################
# algorithm taken from Kotlin example solution

# The clues, and the method that implements them:
#   1. There are five houses.
#   2. The Englishman lives in the red house. (solveForNationality)
#   3. The Spaniard owns the dog. (solveForPets)
#   4. Coffee is drunk in the green house. (solveForBeverages)
#   5. The Ukrainian drinks tea. (solveForBeverages)
#   6. The green house is immediately to the right of the ivory house.  (solveForColour)
#   7. The Old Gold smoker owns snails. (solveForPets)
#   8. Kools are smoked in the yellow house. (solveForSmokes)
#   9. Milk is drunk in the middle house. (solveForBeverages)
#   10.The Norwegian lives in the first house. (solveForNationality)
#   11.The man who smokes Chesterfields lives in the house next to the man with the fox. (solveForPets)
#   12.Kools are smoked in the house next to the house where the horse is kept.
#   13.The Lucky Strike smoker drinks orange juice. (solveForSmokes)
#   14.The Japanese smokes Parliaments. (solveForSmokes)
#   15.The Norwegian lives next to the blue house. (solveForNationality)


def solveForPets($state):
    . as [$dog, $snails, $fox, $horse, $zebra]
        # clues 3, 7, 11, 12
    |   if ($dog == $state.spanish) and
            ($snails == $state.oldGold) and
            ($fox | nextTo($state.chesterfields)) and
            ($horse | nextTo($state.kools))
        then
            ($state + {$dog, $snails, $fox, $horse, $zebra}) as $state | ["PETS", $state] | debug |
            {
                drinksWater: $state.nationalities[$state.water],
                ownsZebra: $state.nationalities[$zebra]
            }
        else empty
        end;

def solveForSmokes($state):
    . as [$oldGold, $kools, $chesterfields, $luckyStrike, $parliaments]
        # clues 8, 13, 14
    |   if ($kools == $state.yellow) and
            ($luckyStrike == $state.orangeJuice) and
            ($parliaments == $state.japanese)
        then
            ($state + {$oldGold, $kools, $chesterfields, $luckyStrike, $parliaments}) as $state
            #| ["cigs", $state] | debug
            | permute5
            | solveForPets($state)
        else empty
        end;


def solveForBeverages($state):
    . as [$coffee, $tea, $milk, $orangeJuice, $water]
        # clues 4, 5, 9
    |   if ($coffee == $state.green) and
            ($tea == $state.ukranian) and
            ($milk == middle)
        then
            ($state + {$coffee, $tea, $milk, $orangeJuice, $water}) as $state
            #| ["bevvie", $state] | debug
            | permute5
            | solveForSmokes($state)
        else empty
        end;

def solveForNationality($state):
    . as [$english, $spanish, $ukranian, $norwegian, $japanese]
        # clues 2, 10, 15
    |   if ($english == $state.red) and
            ($norwegian == first) and
            ($norwegian | nextTo($state.blue))
        then
            ( $state 
                + {$english, $spanish, $ukranian, $norwegian, $japanese}
                + {
                    nationalities: (
                      [] 
                      | .[$english] = "EnglishMan"
                      | .[$spanish] = "Spaniard"
                      | .[$ukranian] = "Ukranian"
                      | .[$norwegian] = "Norwegian"
                      | .[$japanese] = "Japanese"
                    )
                  }
            ) as $state
            #| ["nation", $state] | debug
            | permute5
            | solveForBeverages($state)
        else empty
        end;


def solveForColour($state):
    . as [$red, $green, $ivory, $yellow, $blue]
    |   if $green | rightOf($ivory)         # clue 6
        then
            ($state + {$red, $green, $ivory, $yellow, $blue}) as $state
            #| ["colour", $state] | debug
            | permute5
            | solveForNationality($state)
        else empty
        end;


permute5 | solveForColour({})
